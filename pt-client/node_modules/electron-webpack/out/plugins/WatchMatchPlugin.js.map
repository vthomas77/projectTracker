{"version":3,"sources":["../../src/plugins/WatchMatchPlugin.ts"],"names":[],"mappings":";;;;;;;AAEM,MAAA,iBAAA,CAAA;AACJ,cAA6B,MAA7B,EAA6E,KAA7E,EAAuF;AAA1D,SAAA,MAAA,GAAA,MAAA;AAAgD,SAAA,KAAA,GAAA,KAAA;AAC5E;;AAED,QAAM,QAAN,EAAwB;AACtB,aAAS,KAAT,CAAe,gBAAf,CAAgC,GAAhC,CAAoC,mBAApC,EAAyD,MAAK;AAC3D,eAAiB,eAAjB,GAAmC,IAAI,uBAAJ,CAA6B,SAAiB,eAA9C,EAA+D,KAAK,MAApE,EAA4E,KAAK,KAAjF,CAAnC;AACF,KAFD;AAGD;;AARG;;;;AAoBN,MAAA,uBAAA,CAAA;AACE,cAA6B,GAA7B,EAAoE,MAApE,EAAoH,KAApH,EAA8H;AAAjG,SAAA,GAAA,GAAA,GAAA;AAAuC,SAAA,MAAA,GAAA,MAAA;AAAgD,SAAA,KAAA,GAAA,KAAA;AACnH;;AAED,QAAM,KAAN,EAA4B,IAA5B,EAAiD,OAAjD,EAAyE,SAAzE,EAA4F,OAA5F,EAA0G,QAA1G,EAA6I,iBAA7I,EAA0K;AACxK,UAAM,gBAA+B,EAArC;AACA,UAAM,eAA8B,EAApC;AACA,UAAM,gBAA+B,EAArC;AACA,UAAM,eAA8B,EAApC;AACA,aAAS,KAAK,MAAd,EAAsB,KAAtB,EAA6B,aAA7B,EAA4C,aAA5C;AACA,aAAS,KAAK,MAAd,EAAsB,IAAtB,EAA4B,YAA5B,EAA0C,YAA1C;;AAEA,QAAI,KAAK,KAAL,CAAW,OAAf,EAAwB;AACtB,WAAK,KAAL,CAAW,SAAS,cAAc,KAAd,CAAoB,UAAU,cAAc,IAAd,CAAmB,aAAa,cAAc,OAAd,CAAsB,EAAxG;AACA,WAAK,KAAL,CAAW,iBAAiB,cAAc,aAAd,CAA4B,kBAAkB,cAAc,YAAd,CAA2B,mBAAmB,cAAc,aAAd,CAA4B,kBAAkB,cAAc,YAAd,CAA2B,EAAjM;AACD;;AAED,WAAO,KAAK,GAAL,CAAS,KAAT,CAAe,aAAf,EAA8B,YAA9B,EAA4C,OAA5C,EAAqD,SAArD,EAAgE,OAAhE,EAAyE,CAAC,KAAD,EAAQ,aAAR,EAAuB,YAAvB,EAAqC,eAArC,EAAsD,cAAtD,EAAsE,aAAtE,KAAuF;AACrK,UAAI,SAAS,IAAb,EAAmB;AACjB,iBAAS,KAAT;AACA;AACD;;AAED,WAAK,MAAM,CAAX,IAAgB,aAAhB,EAA+B;AAC7B,uBAAgB,CAAhB,IAAqB,CAArB;AACD;;AAED,WAAK,MAAM,CAAX,IAAgB,YAAhB,EAA8B;AAC5B,sBAAe,CAAf,IAAoB,CAApB;AACD;;AAED,eAAS,IAAT,EAAe,aAAf,EAA8B,YAA9B,EAA4C,eAA5C,EAA6D,cAA7D,EAA6E,aAA7E;AACD,KAfM,EAeJ,iBAfI,CAAP;AAgBD;;AAjCH;;AAoCA,SAAA,QAAA,CAAkB,MAAlB,EAAiD,IAAjD,EAAsE,QAAtE,EAA+F,QAA/F,EAAsH;AACpH,OAAK,MAAM,IAAX,IAAmB,IAAnB,EAAyB;AACvB,KAAC,OAAO,IAAP,IAAe,QAAf,GAA0B,QAA3B,EAAqC,IAArC,CAA0C,IAA1C;AACD;AACF;;AAED,SAAA,aAAA,CAAuB,IAAvB,EAA0C;AACxC,SAAO,OAAO,KAAK,GAAL,CAAS,MAAM,GAAG,UAAH,CAAc,QAAQ,GAAR,EAAd,IAA+B,GAAG,SAAH,CAAa,QAAQ,GAAR,GAAc,MAAd,GAAuB,CAApC,CAA/B,GAAwE,EAAvF,EAA2F,IAA3F,CAAgG,OAAhG,CAAwG,EAAtH;AACD,C","sourcesContent":["import { Compiler } from \"webpack\"\n\nexport class WatchFilterPlugin {\n  constructor(private readonly filter: WatchFileSystemFilter, private readonly debug: any) {\n  }\n\n  apply(compiler: Compiler) {\n    compiler.hooks.afterEnvironment.tap(\"WatchFilterPlugin\", () => {\n      (compiler as any).watchFileSystem = new IgnoringWatchFileSystem((compiler as any).watchFileSystem, this.filter, this.debug)\n    })\n  }\n}\n\ninterface WatchFileSystem {\n  watch(files: Array<string>, dirs: Array<string>, missing: Array<string>, startTime: number, options: any, callback: WatchFileSystemCallback, callbackUndelayed: () => void): void\n}\n\n// include or not\nexport type WatchFileSystemFilter = (file: string) => boolean\n\nexport type WatchFileSystemCallback = (error: Error | null, filesModified?: Array<string>, dirsModified?: Array<string>, missingModified?: Array<string>, fileTimestamps?: { [key: string]: number }, dirTimestamps?: { [key: string]: number }) => void\n\nclass IgnoringWatchFileSystem {\n  constructor(private readonly wfs: WatchFileSystem, private readonly filter: WatchFileSystemFilter, private readonly debug: any) {\n  }\n\n  watch(files: Array<string>, dirs: Array<string>, missing: Array<string>, startTime: number, options: any, callback: WatchFileSystemCallback, callbackUndelayed: () => void) {\n    const includedFiles: Array<string> = []\n    const includedDirs: Array<string> = []\n    const excludedFiles: Array<string> = []\n    const excludedDirs: Array<string> = []\n    separate(this.filter, files, includedFiles, excludedFiles)\n    separate(this.filter, dirs, includedDirs, excludedDirs)\n\n    if (this.debug.enabled) {\n      this.debug(`files:${stringifyList(files)}\\ndirs:${stringifyList(dirs)}\\nmissing:${stringifyList(missing)}`)\n      this.debug(`includedFiles:${stringifyList(includedFiles)}\\nincludedDirs:${stringifyList(includedDirs)}\\nexcludedFiles:${stringifyList(excludedFiles)}\\nexcludedDirs:${stringifyList(excludedDirs)}`)\n    }\n\n    return this.wfs.watch(includedFiles, includedDirs, missing, startTime, options, (error, filesModified, dirsModified, missingModified, fileTimestamps, dirTimestamps) => {\n      if (error != null) {\n        callback(error)\n        return\n      }\n\n      for (const p of excludedFiles) {\n        fileTimestamps![p] = 1\n      }\n\n      for (const p of excludedDirs) {\n        dirTimestamps![p] = 1\n      }\n\n      callback(null, filesModified, dirsModified, missingModified, fileTimestamps, dirTimestamps)\n    }, callbackUndelayed)\n  }\n}\n\nfunction separate(filter: WatchFileSystemFilter, list: Array<string>, included: Array<string>, excluded: Array<string>) {\n  for (const file of list) {\n    (filter(file) ? included : excluded).push(file)\n  }\n}\n\nfunction stringifyList(list: Array<string>) {\n  return `\\n  ${list.map(it => it.startsWith(process.cwd()) ? it.substring(process.cwd().length + 1) : it).join(\",\\n  \")}`\n}"],"sourceRoot":""}
