{"version":3,"sources":["../../src/dev/WebpackDevServerManager.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from \"chalk\"\nimport { ChildProcess } from \"child_process\"\nimport * as path from \"path\"\nimport { createConfigurator } from \"../main\"\nimport { statOrNull } from \"../util\"\nimport { ChildProcessManager, PromiseNotifier, run } from \"./ChildProcessManager\"\nimport { LineFilter, logError, logProcess, logProcessErrorOutput } from \"./devUtil\"\n\nconst debug = require(\"debug\")(\"electron-webpack\")\n\nfunction runWds(projectDir: string, env: any) {\n  const isWin = process.platform === \"win32\"\n  const webpackDevServerPath = path.join(projectDir, \"node_modules\", \".bin\", \"webpack-dev-server\" + (isWin ? \".cmd\" : \"\"))\n  debug(`Start renderer WDS ${webpackDevServerPath} on ${env.ELECTRON_WEBPACK_WDS_PORT} port`)\n  return run(webpackDevServerPath, [\"--color\", \"--env.autoClean=false\", \"--config\", path.join(__dirname, \"../../webpack.renderer.config.js\")], {\n    env,\n    cwd: projectDir,\n  })\n}\n\n// 1. in another process to speedup compilation\n// 2. some loaders detect webpack-dev-server hot mode only if run as CLI\nexport async function startRenderer(projectDir: string, env: any) {\n  const webpackConfigurator = await createConfigurator(\"renderer\", {production: false, configuration: {projectDir}})\n  const sourceDir = webpackConfigurator.sourceDir\n  // explicitly set to null - do not handle at all and do not show info message\n  if (sourceDir === null) {\n    return\n  }\n\n  const dirStat = await statOrNull(sourceDir)\n  if (dirStat == null || !dirStat.isDirectory()) {\n    logProcess(\"Renderer\", `No renderer source directory (${path.relative(projectDir, sourceDir)})`, chalk.blue)\n    return\n  }\n\n  if (webpackConfigurator.hasDependency(\"electron-next\")) {\n    debug(`Renderer WDS is not started - there is electron-next dependency`)\n    return\n  }\n\n  const lineFilter = new CompoundRendererLineFilter([\n    new OneTimeLineFilter(\"Project is running at \"),\n    new OneTimeLineFilter(\"webpack output is served from \"),\n  ])\n  return await new Promise((resolve: (() => void) | null, reject: ((error: Error) => void) | null) => {\n    let devServerProcess: ChildProcess | null\n    try {\n      devServerProcess = runWds(projectDir, env)\n    }\n    catch (e) {\n      reject!(e)\n      return\n    }\n\n    //tslint:disable-next-line:no-unused-expression\n    new ChildProcessManager(devServerProcess, \"Renderer WDS\", new PromiseNotifier(resolve, reject))\n    devServerProcess.on(\"error\", error => {\n      if (reject == null) {\n        logError(\"Renderer\", error)\n      }\n      else {\n        reject(error)\n        reject = null\n      }\n    })\n\n    devServerProcess.stdout.on(\"data\", (data: string) => {\n      logProcess(\"Renderer\", data, chalk.blue, lineFilter)\n\n      const r = resolve\n      // we must resolve only after compilation, otherwise devtools disconnected\n      if (r != null && data.includes(\": Compiled successfully.\")) {\n        resolve = null\n        r()\n      }\n    })\n\n    logProcessErrorOutput(\"Renderer\", devServerProcess)\n  })\n}\n\nclass OneTimeLineFilter implements LineFilter {\n  private filtered = false\n\n  constructor(private readonly prefix: string) {\n  }\n\n  filter(line: string) {\n    if (!this.filtered && line.startsWith(this.prefix)) {\n      this.filtered = true\n      return false\n\n    }\n    return true\n  }\n}\n\nclass CompoundRendererLineFilter implements LineFilter {\n  constructor(private readonly filters: Array<LineFilter>) {\n  }\n\n  filter(line: string) {\n    return !this.filters.some(it => !it.filter(line))\n  }\n}"],"sourceRoot":""}
