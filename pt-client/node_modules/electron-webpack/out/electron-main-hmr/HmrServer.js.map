{"version":3,"sources":["../../src/electron-main-hmr/HmrServer.ts"],"names":[],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAGA,MAAM,QAAQ,QAAQ,OAAR,EAAiB,6BAAjB,CAAd;;AAEM,MAAA,SAAA,CAAA;AAAN,gBAAA;AACU,SAAA,KAAA,GAAQ,KAAR;AACC,SAAA,GAAA,GAAM,KAAI,kBAAJ,GAAN;AAmCV;;AAjCC,WAAM;AACJ,WAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACrC,YAAM,aAAa,0BAA0B,QAAQ,GAAR,CAAY,QAAZ,CAAqB,EAArB,CAAwB,OAArE;AACA,WAAK,GAAL,CAAS,MAAT,CAAgB;AAAC,cAAM;AAAP,OAAhB,EAAoC,SAAQ;AAC1C,YAAI,SAAS,IAAb,EAAmB;AACjB,iBAAO,KAAP;AACD;;AACD,YAAI,MAAM,OAAV,EAAmB;AACjB,gBAAM,2BAA2B,UAAU,EAA3C;AACD;;AACD,gBAAQ,UAAR;AACD,OARD;AASD,KAXM,CAAP;AAYD;;AAED,kBAAa;AACX,SAAK,KAAL,GAAa,KAAb;AACD;;AAED,QAAM,KAAN,EAAkB;AAChB,SAAK,KAAL,GAAa,IAAb;AACA,iBAAa,MAAK;AAChB,UAAI,CAAC,KAAK,KAAV,EAAiB;AACf;AACD;;AAED,YAAM,OAAO,MAAM,MAAN,CAAa;AAAC,gBAAQ,KAAT;AAAgB,gBAAQ,KAAxB;AAA+B,kBAAU,KAAzC;AAAgD,iBAAS;AAAzD,OAAb,EAA8E,IAA3F;;AACA,UAAI,MAAM,OAAV,EAAmB;AACjB,cAAM,oBAAoB,IAAI,EAA9B;AACD;;AACD,WAAK,GAAL,CAAS,IAAT,CAAc,QAAd,EAAwB;AAAC;AAAD,OAAxB;AACD,KAVD;AAWD;;AApCG,C","sourcesContent":["import Crocket from \"crocket\"\nimport { Stats } from \"webpack\"\n\nconst debug = require(\"debug\")(\"electron-webpack:dev-runner\")\n\nexport class HmrServer {\n  private state = false\n  readonly ipc = new Crocket()\n\n  listen(): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const socketPath = `/tmp/electron-main-ipc-${process.pid.toString(16)}.sock`\n      this.ipc.listen({path: socketPath}, error => {\n        if (error != null) {\n          reject(error)\n        }\n        if (debug.enabled) {\n          debug(`HMR Server listening on ${socketPath}`)\n        }\n        resolve(socketPath)\n      })\n    })\n  }\n\n  beforeCompile() {\n    this.state = false\n  }\n\n  built(stats: Stats): void {\n    this.state = true\n    setImmediate(() => {\n      if (!this.state) {\n        return\n      }\n\n      const hash = stats.toJson({assets: false, chunks: false, children: false, modules: false}).hash\n      if (debug.enabled) {\n        debug(`Send built: hash ${hash}`)\n      }\n      this.ipc.emit(\"/built\", {hash})\n    })\n  }\n}"],"sourceRoot":""}
