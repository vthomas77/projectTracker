{"version":3,"sources":["../../src/electron-main-hmr/HmrClient.ts"],"names":[],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,MAAM,QAAQ,QAAQ,OAAR,EAAiB,kCAAjB,CAAd;;AAMM,MAAA,SAAA,CAAA;AAKJ,cAAY,UAAZ,EAAwC,GAAxC,EAAsF,iBAAtF,EAAqH;AAA7E,SAAA,GAAA,GAAA,GAAA;AAA8C,SAAA,iBAAA,GAAA,iBAAA;AAJtF,SAAA,QAAA,GAA0B,IAA1B;AAEiB,SAAA,GAAA,GAAM,KAAI,kBAAJ,GAAN;;AAGf,QAAI,OAAO,IAAX,EAAiB;AACf,YAAM,IAAI,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAED,SAAK,GAAL,CAAS,OAAT,CAAiB;AAAC,YAAM;AAAP,KAAjB,EAAqC,SAAQ;AAC3C,UAAI,SAAS,IAAb,EAAmB;AACjB,gBAAQ,KAAR,CAAc,MAAM,KAAN,IAAe,MAAM,QAAN,EAA7B;AACD;;AACD,UAAI,MAAM,OAAV,EAAmB;AACjB,cAAM,wBAAwB,UAAU,GAAxC;AACD;AACF,KAPD;AASA,SAAK,GAAL,CAAS,EAAT,CAAmB,OAAnB,EAA4B,SAAQ;AAClC,cAAQ,KAAR,CAAc,MAAM,KAAN,IAAe,MAAM,QAAN,EAA7B;AACD,KAFD;AAIA,SAAK,GAAL,CAAS,EAAT,CAA0B,QAA1B,EAAoC,QAAO;AACzC,WAAK,QAAL,GAAgB,KAAK,IAArB;;AACA,UAAI,KAAK,UAAL,EAAJ,EAAuB;AACrB,YAAI,MAAM,OAAV,EAAmB;AACjB,gBAAM,oBAAoB,KAAK,IAAI,EAAnC;AACD;;AACD;AACD;;AAED,YAAM,SAAS,IAAI,MAAJ,EAAf;;AACA,UAAI,WAAW,MAAf,EAAuB;AACrB,aAAK,KAAL;AACD,OAFD,MAGK,IAAI,WAAW,OAAX,IAAsB,WAAW,MAArC,EAA6C;AAChD,gBAAQ,IAAR,CAAa,kDAAkD,MAAM,+BAArE;AACD,OAFI,MAGA,IAAI,MAAM,OAAV,EAAmB;AACtB,cAAM,gCAAgC,MAAM,EAA5C;AACD;AACF,KAnBD;AAoBD;;AAEO,eAAU;AAChB,WAAO,KAAK,QAAL,KAAkB,KAAK,iBAAL,EAAzB;AACD;;AAEO,UAAK;AACX,SAAK,GAAL,CAAS,KAAT,CAAe,IAAf,EACG,IADH,CACQ,mBAAkB;AACtB,UAAI,mBAAmB,IAAvB,EAA6B;AAC3B,gBAAQ,IAAR,CAAa,qDAAb;AACA,gBAAQ,IAAR,CAAa,+DAAb;AACA;AACD;;AAED,cAAQ,8BAAR,EAAwC,eAAxC,EAAyD,eAAzD;;AAEA,UAAI,KAAK,UAAL,EAAJ,EAAuB;AACrB,gBAAQ,GAAR,CAAY,0BAAZ;AACD;AACF,KAbH,EAcG,KAdH,CAcS,SAAQ;AACb,YAAM,SAAS,KAAK,GAAL,CAAS,MAAT,EAAf;;AACA,UAAI,WAAW,OAAX,IAAsB,WAAW,MAArC,EAA6C;AAC3C,gBAAQ,IAAR,CAAa,SAAS,MAAM,KAAN,IAAe,MAAM,QAAN,EAAgB,EAArD;AACA,gBAAQ,IAAR,CAAa,qFAAb;;AACA,gBAAQ,UAAR,EAAoB,GAApB,CAAwB,IAAxB,CAA6B,GAA7B;AACD,OAJD,MAKK;AACH,gBAAQ,IAAR,CAAa,wBAAwB,MAAM,KAAN,IAAe,MAAM,OAAO,EAAjE;AACD;AACF,KAxBH;AAyBD;;AA3EG,C","sourcesContent":["import Crocket from \"crocket\"\n\nconst debug = require(\"debug\")(\"electron-webpack:main-client-hmr\")\n\ninterface BuiltMessage {\n  hash: string\n}\n\nexport class HmrClient {\n  lastHash: string | null = null\n\n  private readonly ipc = new Crocket()\n\n  constructor(socketPath: string, private hot: __WebpackModuleApi.Hot, private readonly currentHashGetter: () => string) {\n    if (hot == null) {\n      throw new Error(`[HMR] Hot Module Replacement is disabled.`)\n    }\n\n    this.ipc.connect({path: socketPath}, error => {\n      if (error != null) {\n        console.error(error.stack || error.toString())\n      }\n      if (debug.enabled) {\n        debug(`Connected to server (${socketPath})`)\n      }\n    })\n\n    this.ipc.on<Error>(\"error\", error => {\n      console.error(error.stack || error.toString())\n    })\n\n    this.ipc.on<BuiltMessage>(\"/built\", data => {\n      this.lastHash = data.hash\n      if (this.isUpToDate()) {\n        if (debug.enabled) {\n          debug(`Up to date, hash ${data.hash}`)\n        }\n        return\n      }\n\n      const status = hot.status()\n      if (status === \"idle\") {\n        this.check()\n      }\n      else if (status === \"abort\" || status === \"fail\") {\n        console.warn(`[HMR] Cannot apply update as a previous update ${status}ed. Need to do a full reload!`)\n      }\n      else if (debug.enabled) {\n        debug(`Cannot check changes, status ${status}`)\n      }\n    })\n  }\n\n  private isUpToDate() {\n    return this.lastHash === this.currentHashGetter()\n  }\n\n  private check() {\n    this.hot.check(true)\n      .then(outdatedModules => {\n        if (outdatedModules == null) {\n          console.warn(`[HMR] Cannot find update. Need to do a full reload!`)\n          console.warn(`[HMR] (Probably because of restarting the webpack-dev-server)`)\n          return\n        }\n\n        require(\"webpack/hot/log-apply-result\")(outdatedModules, outdatedModules)\n\n        if (this.isUpToDate()) {\n          console.log(`[HMR] App is up to date.`)\n        }\n      })\n      .catch(error => {\n        const status = this.hot.status()\n        if (status === \"abort\" || status === \"fail\") {\n          console.warn(`[HMR] ${error.stack || error.toString()}`)\n          console.warn(\"[HMR] Cannot apply update. Need to do a full reload - application will be restarted\")\n          require(\"electron\").app.exit(100)\n        }\n        else {\n          console.warn(`[HMR] Update failed: ${error.stack || error.message}`)\n        }\n      })\n  }\n}"],"sourceRoot":""}
