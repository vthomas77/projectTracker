{"version":3,"sources":["../src/util.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;;;;;2CAEO,WAA0B,IAA1B,EAAsC;AAC3C,WAAO,qBAAqB,sBAAK,IAAL,CAArB,CAAP;AACD,G;;kBAFW,U;;;;;;;AAIN,SAAA,oBAAA,CAAkC,OAAlC,EAAqD;AACzD,SAAO,iBAAiB,OAAjB,EAA0B,IAA1B,CAAP;AACD;;AAEK,SAAA,gBAAA,CAA8B,OAA9B,EAAmD,aAAnD,EAAmE;AACvE,SAAO,QACJ,KADI,CACE,KAAI;AACT,QAAI,EAAE,IAAF,KAAW,QAAX,IAAuB,EAAE,IAAF,KAAW,SAAtC,EAAiD;AAC/C,aAAO,aAAP;AACD;;AACD,UAAM,CAAN;AACD,GANI,CAAP;AAOD;;AAEK,SAAA,oBAAA,CAA+B,KAA/B,EAAqD,OAArD,EAA2E;AAC/E,SAAO,uBAAgB,MAAhB,CAAuB,MAAM,GAAN,CAAU,MAAM,WAAW,IAAX,GAAkB,EAAlB,GAAuB,KAAK,IAAL,CAAU,OAAV,EAAmB,EAAnB,CAAvC,CAAvB,EAAuF,MAAM,WAAW,EAAX,EAAe,IAAf,CAAoB,MAAM,MAAM,IAAhC,CAA7F,EACJ,IADI,CACC,MAAM,GAAG,MAAH,GAAY,CAAZ,GAAgB,GAAG,CAAH,CAAhB,GAAwB,IAD/B,CAAP;AAED;;AAEK,SAAA,WAAA,CAAsB,WAAtB,EAA2C,WAA3C,EAA8D;AAClE,SAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACrC,UAAM,SAAS,yBAAa;AAAC,sBAAgB;AAAjB,KAAb,CAAf;AACA,WAAO,WAAP,CAAmB,WAAnB,EAAgC,MAAK;AACnC,YAAM,OAAQ,OAAO,OAAP,GAAyB,IAAvC;AACA,aAAO,KAAP,CAAa,MAAM,QAAQ,IAAR,CAAnB;AACD,KAHD;;AAKA,aAAA,QAAA,CAAkB,IAAlB,EAA8B;AAC5B,aAAO,MAAP,CAAc;AACZ,cAAM,WADM;AAEZ,YAFY;AAGZ,iBAAS,CAHG;AAIZ,mBAAW;AAJC,OAAd;AAMD;;AAED,WAAO,EAAP,CAAU,OAAV,EAAmB,KAAI;AACrB,UAAK,EAAU,IAAV,KAAmB,YAAxB,EAAsC;AACpC,eAAO,KAAP,CAAa,MAAM,SAAS,CAAT,CAAnB;AACD,OAFD,MAGK;AACH,eAAO,CAAP;AACD;AACF,KAPD;AASA,aAAS,WAAT;AACD,GA1BM,CAAP;AA2BD,C","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { stat, Stats } from \"fs-extra-p\"\nimport { createServer } from \"net\"\nimport * as path from \"path\"\n\nexport async function statOrNull(file: string): Promise<Stats | null> {\n  return orNullIfFileNotExist(stat(file))\n}\n\nexport function orNullIfFileNotExist<T>(promise: Promise<T>): Promise<T | null> {\n  return orIfFileNotExist(promise, null)\n}\n\nexport function orIfFileNotExist<T>(promise: Promise<T>, fallbackValue: T): Promise<T> {\n  return promise\n    .catch(e => {\n      if (e.code === \"ENOENT\" || e.code === \"ENOTDIR\") {\n        return fallbackValue\n      }\n      throw e\n    })\n}\n\nexport function getFirstExistingFile(names: Array<string>, rootDir: string | null): Promise<string | null> {\n  return BluebirdPromise.filter(names.map(it => rootDir == null ? it : path.join(rootDir, it)), it => statOrNull(it).then(it => it != null))\n    .then(it => it.length > 0 ? it[0] : null)\n}\n\nexport function getFreePort(defaultHost: string, defaultPort: number) {\n  return new Promise((resolve, reject) => {\n    const server = createServer({pauseOnConnect: true})\n    server.addListener(\"listening\", () => {\n      const port = (server.address() as any).port\n      server.close(() => resolve(port))\n    })\n\n    function doListen(port: number) {\n      server.listen({\n        host: defaultHost,\n        port,\n        backlog: 1,\n        exclusive: true\n      })\n    }\n\n    server.on(\"error\", e => {\n      if ((e as any).code === \"EADDRINUSE\") {\n        server.close(() => doListen(0))\n      }\n      else {\n        reject(e)\n      }\n    })\n\n    doListen(defaultPort)\n  })\n}"],"sourceRoot":""}
