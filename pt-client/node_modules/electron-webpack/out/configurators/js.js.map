{"version":3,"sources":["../../src/configurators/js.ts"],"names":[],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGM,SAAA,iBAAA,CAA4B,YAA5B,EAA6D;AACjE;AACA,QAAM,UAAU,CACd,CACE,QAAQ,mBAAR,EAA6B,OAD/B,EACwC;AACtC,aAAS,KAD6B;AAEtC,aAAS,sBAAsB,aAAa,UAAnC,EAA+C,aAAa,eAA5D;AAF6B,GADxC,CADc,CAAhB;AAOA,QAAM,UAAU,CACd,QAAQ,oCAAR,CADc,CAAhB;;AAIA,MAAI,aAAa,IAAb,KAAsB,MAAtB,IAAgC,aAAa,aAAb,CAA2B,YAA3B,CAApC,EAA8E;AAC5E,YAAQ,IAAR,CAAa,CAAC,QAAQ,wBAAR,CAAD,EAAoC;AAC/C,mBAAa,YADkC;AAE/C,wBAAkB;AAF6B,KAApC,CAAb;AAID;;AAED,eAAa,OAAb,EAAsB,aAAa,0BAAb,CAAwC;AAAC,cAAU,CAAC,eAAD,CAAX;AAA8B,cAAU,CAAC,kBAAD,EAAqB,mBAArB;AAAxC,GAAxC,CAAtB;AACA,eAAa,OAAb,EAAsB,aAAa,0BAAb,CAAwC;AAAC,cAAU,CAAC,eAAD,CAAX;AAA8B,cAAU,CAAC,oCAAD;AAAxC,GAAxC,CAAtB;AAEA,SAAO;AACL,YAAQ,cADH;AAEL,aAAS;AACP,aADO;AAEP;AAFO;AAFJ,GAAP;AAOD;;AAED,SAAA,YAAA,CAAsB,EAAtB,EAAsC,KAAtC,EAA0D;AACxD,OAAK,MAAM,IAAX,IAAmB,KAAnB,EAA0B;AACxB,UAAM,SAAS,QAAQ,IAAR,CAAf;;AACA,OAAG,IAAH,CAAQ,CAAC,OAAO,OAAP,IAAkB,MAAnB,CAAR;AACD;AACF;;AAED,SAAA,qBAAA,CAA+B,UAA/B,EAAoD,eAApD,EAA2E;AACzE,MAAI,UAAJ,EAAgB;AACd,WAAO;AACL,gBAAU;AADL,KAAP;AAGD;;AAED,MAAI,cAAc,OAAlB;;AACA,MAAI,mBAAI,eAAJ,EAAqB,cAArB,CAAJ,EAA0C;AACxC,kBAAc,OAAd;AACD,GAFD,MAGK,IAAI,mBAAI,eAAJ,EAAqB,OAArB,CAAJ,EAAmC;AACtC,kBAAc,OAAd;AACD,GAFI,MAGA,IAAI,mBAAI,eAAJ,EAAqB,OAArB,CAAJ,EAAmC;AACtC,kBAAc,OAAd;AACD;;AAED,SAAO;AACL,UAAM;AADD,GAAP;AAGD,C","sourcesContent":["import { gte } from \"semver\"\nimport { WebpackConfigurator } from \"../main\"\n\nexport function createBabelLoader(configurator: WebpackConfigurator) {\n  // better to use require instead of just preset name to avoid babel resolving (in our test we set custom resolver - and only in case of explicit required it works)\n  const presets = [\n    [\n      require(\"@babel/preset-env\").default, {\n      modules: false,\n      targets: computeBabelEnvTarget(configurator.isRenderer, configurator.electronVersion),\n    }],\n  ]\n  const plugins = [\n    require(\"babel-plugin-syntax-dynamic-import\"),\n  ]\n\n  if (configurator.type !== \"main\" && configurator.hasDependency(\"element-ui\")) {\n    plugins.push([require(\"babel-plugin-component\"), {\n      libraryName: \"element-ui\",\n      styleLibraryName: \"theme-chalk\"\n    }])\n  }\n\n  addBabelItem(presets, configurator.getMatchingDevDependencies({includes: [\"babel-preset-\"], excludes: [\"babel-preset-env\", \"@babel/preset-env\"]}))\n  addBabelItem(plugins, configurator.getMatchingDevDependencies({includes: [\"babel-plugin-\"], excludes: [\"babel-plugin-syntax-dynamic-import\"]}))\n\n  return {\n    loader: \"babel-loader\",\n    options: {\n      presets,\n      plugins\n    }\n  }\n}\n\nfunction addBabelItem(to: Array<any>, names: Array<string>) {\n  for (const name of names) {\n    const module = require(name)\n    to.push([module.default || module])\n  }\n}\n\nfunction computeBabelEnvTarget(isRenderer: boolean, electronVersion: string) {\n  if (isRenderer) {\n    return {\n      electron: electronVersion\n    }\n  }\n\n  let nodeVersion = \"7.4.0\"\n  if (gte(electronVersion, \"2.0.0-beta.4\")) {\n    nodeVersion = \"8.9.3\"\n  }\n  else if (gte(electronVersion, \"1.8.2\")) {\n    nodeVersion = \"8.2.1\"\n  }\n  else if (gte(electronVersion, \"1.7.3\")) {\n    nodeVersion = \"7.9.0\"\n  }\n\n  return {\n    node: nodeVersion\n  }\n}"],"sourceRoot":""}
