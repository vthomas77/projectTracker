{"version":3,"sources":["../../src/configurators/eslint.ts"],"names":[],"mappings":";;;;;;;AAEM,SAAA,eAAA,CAA0B,YAA1B,EAA2D;AAC/D,QAAM,YAAY,aAAa,gBAAb,CAA8B,yBAA9B,CAAlB;;AACA,MAAI,EAAE,aAAc,aAAa,gBAAb,CAA8B,QAA9B,KAA2C,aAAa,gBAAb,CAA8B,eAA9B,CAA3D,CAAJ,EAAiH;AAC/G;AACD;;AAED,QAAM,UAAmC;AACvC,SAAK,aAAa;AADqB,GAAzC;;AAGA,MAAI,aAAa,aAAa,gBAAb,CAA8B,2BAA9B,CAAjB,EAA6E;AAC3E,YAAQ,SAAR,GAAoB,QAAQ,2BAAR,CAApB;AACD;;AAED,eAAa,KAAb,CAAmB,IAAnB,CAAwB;AACtB,UAAM,oBADgB;AAEtB,aAAS,KAFa;AAGtB,aAAS,cAHa;AAItB,YAAQ,eAJc;AAKtB;AALsB,GAAxB;AAOD,C","sourcesContent":["import { WebpackConfigurator } from \"../main\"\n\nexport function configureEslint(configurator: WebpackConfigurator) {\n  const hasPreset = configurator.hasDevDependency(\"electron-webpack-eslint\")\n  if (!(hasPreset || (configurator.hasDevDependency(\"eslint\") && configurator.hasDevDependency(\"eslint-loader\")))) {\n    return\n  }\n\n  const options: { [name: string]: any } = {\n    cwd: configurator.projectDir\n  }\n  if (hasPreset || configurator.hasDevDependency(\"eslint-friendly-formatter\")) {\n    options.formatter = require(\"eslint-friendly-formatter\")\n  }\n\n  configurator.rules.push({\n    test: /\\.(jsx?|tsx?|vue)$/,\n    enforce: \"pre\",\n    exclude: /node_modules/,\n    loader: \"eslint-loader\",\n    options\n  })\n}"],"sourceRoot":""}
