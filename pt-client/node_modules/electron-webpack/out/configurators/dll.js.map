{"version":3,"sources":["../../src/configurators/dll.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;2CAEO,WAA4B,YAA5B,EAA6D;AAClE,QAAI,cAA6B,IAAjC;AACA,UAAM,aAAa,aAAa,UAAhC;;AAEA,QAAI,aAAa,IAAb,KAAsB,cAA1B,EAA0C;AACxC,YAAM,MAAM,aAAa,4BAAb,CAA0C,QAA1C,CAAqD,GAAjE;;AACA,UAAI,OAAO,IAAX,EAAiB;AACf,cAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,mBAAa,MAAb,CAAoB,KAApB,GAA4B,MAAM,OAAN,CAAc,GAAd,IAAqB;AAAC,gBAAQ;AAAT,OAArB,GAAqC,GAAjE;AAEA,oBAAc,KAAK,IAAL,CAAU,aAAa,mBAAvB,EAA4C,aAAa,IAAzD,EAA+D,eAA/D,CAAd;AACA,mBAAa,OAAb,CAAqB,IAArB,CAA0B,KAAI,oBAAJ,EAAc;AACtC,cAAM,QADgC;AAEtC,cAAM,WAFgC;AAGtC,iBAAS;AAH6B,OAAd,CAA1B;AAMA,YAAM,SAAS,aAAa,MAAb,CAAoB,MAAnC,CAfwC,CAgBxC;;AACA,aAAO,OAAO,aAAd;AACA,aAAO,OAAP,GAAiB,QAAjB;AACD,KAnBD,MAoBK,IAAI,aAAa,IAAb,KAAsB,UAA1B,EAAsC;AACzC,YAAM,SAAS,KAAK,IAAL,CAAU,aAAa,mBAAvB,EAA4C,cAA5C,CAAf;AACA,YAAM,UAAU,MAAM,wBAAW,MAAX,CAAtB;;AACA,UAAI,WAAW,IAAX,IAAmB,CAAC,QAAQ,WAAR,EAAxB,EAA+C;AAC7C,qBAAa,KAAb,CAAmB,kBAAnB;AACA,eAAO,IAAP;AACD;;AAED,mBAAa,KAAb,CAAmB,kBAAkB,MAAM,EAA3C;AACA,mBAAa,OAAb,CAAqB,IAArB,CAA0B,KAAI,6BAAJ,EAAuB;AAC/C,iBAAS,UADsC;AAE/C,kBAAU,MAAM,0BAAS,KAAK,IAAL,CAAU,MAAV,EAAkB,eAAlB,CAAT;AAF+B,OAAvB,CAA1B;AAID;;AAED,WAAO,WAAP;AACD,G;;kBAxCW,Y;;;;;;;;4CA0CL,WAA4B,MAA5B,EAA4C,YAA5C,EAA6E;AAClF,QAAI,aAAa,4BAAb,CAA0C,QAA1C,CAAqD,GAArD,IAA4D,IAAhE,EAAsE;AACpE,aAAO,EAAP;AACD;;AAED,UAAM,QAAQ,MAAM,kCAAqB,yBAAQ,MAAR,CAArB,CAApB;AACA,WAAO,SAAS,IAAT,GAAgB,EAAhB,GAAqB,MAAM,MAAN,CAAa,MAAM,GAAG,QAAH,CAAY,KAAZ,KAAsB,GAAG,QAAH,CAAY,MAAZ,CAAzC,EAA8D,IAA9D,EAA5B;AACD,G;;kBAPW,Y","sourcesContent":["import { readdir, readJson } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { DllPlugin, DllReferencePlugin } from \"webpack\"\nimport { WebpackConfigurator } from \"../main\"\nimport { orNullIfFileNotExist, statOrNull } from \"../util\"\n\nexport async function configureDll(configurator: WebpackConfigurator): Promise<string | null> {\n  let dllManifest: string | null = null\n  const projectDir = configurator.projectDir\n\n  if (configurator.type === \"renderer-dll\") {\n    const dll = configurator.electronWebpackConfiguration.renderer!!.dll\n    if (dll == null) {\n      throw new Error(`renderer-dll requires DLL configuration`)\n    }\n\n    configurator.config.entry = Array.isArray(dll) ? {vendor: dll} : dll\n\n    dllManifest = path.join(configurator.commonDistDirectory, configurator.type, \"manifest.json\")\n    configurator.plugins.push(new DllPlugin({\n      name: \"[name]\",\n      path: dllManifest,\n      context: projectDir,\n    }))\n\n    const output = configurator.config.output!\n    // leave as default \"var\"\n    delete output.libraryTarget\n    output.library = \"[name]\"\n  }\n  else if (configurator.type === \"renderer\") {\n    const dllDir = path.join(configurator.commonDistDirectory, \"renderer-dll\")\n    const dirStat = await statOrNull(dllDir)\n    if (dirStat == null || !dirStat.isDirectory()) {\n      configurator.debug(\"No DLL directory\")\n      return null\n    }\n\n    configurator.debug(`DLL directory: ${dllDir}`)\n    configurator.plugins.push(new DllReferencePlugin({\n      context: projectDir,\n      manifest: await readJson(path.join(dllDir, \"manifest.json\")),\n    }))\n  }\n\n  return dllManifest\n}\n\nexport async function getDllAssets(dllDir: string, configurator: WebpackConfigurator) {\n  if (configurator.electronWebpackConfiguration.renderer!!.dll == null) {\n    return []\n  }\n\n  const files = await orNullIfFileNotExist(readdir(dllDir))\n  return files == null ? [] : files.filter(it => it.endsWith(\".js\") || it.endsWith(\".css\")).sort()\n}"],"sourceRoot":""}
